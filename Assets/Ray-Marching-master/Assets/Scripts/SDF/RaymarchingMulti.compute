#pragma kernel CSMain
#include "UnityCG.cginc"

// Texture2D<float4> Source;
Texture2D<float4> Depth;
// Texture2D<float4> DepthTexture;
RWTexture2D<float4> Destination;

float Width;
float Height;

// Texture2D<float4> _CameraDepthTexture;
// Texture2D<float4> _CameraDepthTexture;
// sampler2D sampler_CameraDepthTexture;

// sampler2D sampler_CameraDepthTexture;
// Texture2D<float4> _CameraGBufferTexture2;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

static const float maxDst = 1000;
static const float epsilon = 0.001f;
static const float shadowBias = epsilon * 50;
// static const float shadowBias = 0;
float depthScaler;

struct Shape {

  float3 position;
  float3 size;
  float3 colour;
  int shapeType;
  int operation;
  float blendStrength;
  int numChildren;
};

struct Light {
  float3 position;
  float3 scale;
  int pointLight;
};

StructuredBuffer<Shape> shapes;
int numShapes;

StructuredBuffer<Light> lights;
int numLights;


struct Ray {
  float3 origin;
  float3 direction;
};

float SphereDistance(float3 eye, float3 centre, float radius) {
  return distance(eye, centre) - radius;
}

float CubeDistance(float3 eye, float3 centre, float3 size) {
  float3 o = abs(eye-centre) -size;
  float ud = length(max(o,0));
  float n = max(max(min(o.x,0),min(o.y,0)), min(o.z,0));
  return ud+n;
}

// Following distance functions from http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float TorusDistance(float3 eye, float3 centre, float r1, float r2)
{
  float2 q = float2(length((eye-centre).xz)-r1,eye.y-centre.y);
  return length(q)-r2;
}

float PrismDistance(float3 eye, float3 centre, float2 h) {
  float3 q = abs(eye-centre);
  return max(q.z-h.y,max(q.x*0.866025+eye.y*0.5,-eye.y)-h.x*0.5);
}


float CylinderDistance(float3 eye, float3 centre, float2 h) {
  float2 d = abs(float2(length((eye).xz), eye.y)) - h;
  return length(max(d,0.0)) + max(min(d.x,0),min(d. y,0));
}

Ray CreateRay(float3 origin, float3 direction) {
  Ray ray;
  ray.origin = origin;
  ray.direction = direction;
  return ray;
}

Ray CreateCameraRay(float2 uv) {
  float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
  float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
  direction = mul(_CameraToWorld, float4(direction,0)).xyz;
  direction = normalize(direction);
  return CreateRay(origin,direction);
}

// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float4 Blend( float a, float b, float3 colA, float3 colB, float k )
{
  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
  float blendDst = lerp( b, a, h ) - k*h*(1.0-h);
  float3 blendCol = lerp(colB,colA,h);
  return float4(blendCol, blendDst);
}

float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, int operation, float blendStrength) {
  float dst = dstA;
  float3 colour = colourA;

  if (operation == 0) {
    if (dstB < dstA) {
      dst = dstB;
      colour = colourB;
    }
  }
  // Blend
  else if (operation == 1) {
    float4 blend = Blend(dstA,dstB,colourA,colourB, blendStrength);
    dst = blend.w;
    colour = blend.xyz;
  }
  // Cut
  else if (operation == 2) {
    // max(a,-b)
    if (-dstB > dst) {
      dst = -dstB;
      colour = colourB;
    }
  }
  // Mask
  else if (operation == 3) {
    // max(a,b)
    if (dstB > dst) {
      dst = dstB;
      colour = colourB;
    }
  }

  return float4(colour,dst);
}

float GetShapeDistance(Shape shape, float3 eye) {

  if (shape.shapeType == 0) {
    return SphereDistance(eye, shape.position, shape.size.x);
  }
  else if (shape.shapeType == 1) {
    return CubeDistance(eye, shape.position, shape.size);
  }
  else if (shape.shapeType == 2) {
    return TorusDistance(eye, shape.position, shape.size.x, shape.size.y);
  }

  return maxDst;
}


float4 SceneInfo(float3 eye) {
  float globalDst = maxDst;
  float3 globalColour = 1;

  for (int i = 0; i < numShapes; i ++) {
    Shape shape = shapes[i];
    int numChildren = shape.numChildren;

    float localDst = GetShapeDistance(shape,eye);
    float3 localColour = shape.colour;


    for (int j = 0; j < numChildren; j ++) {
      Shape childShape = shapes[i+j+1];
      float childDst = GetShapeDistance(childShape,eye);

      float4 combined = Combine(localDst, childDst, localColour, childShape.colour, childShape.operation, childShape.blendStrength);
      localColour = combined.xyz;
      localDst = combined.w;
    }
    i+=numChildren; // skip over children in outer loop

    float4 globalCombined = Combine(globalDst, localDst, globalColour, localColour, shape.operation, shape.blendStrength);
    globalColour = globalCombined.xyz;
    globalDst = globalCombined.w;
  }

  return float4(globalColour, globalDst);
}

float3 EstimateNormal(float3 p) {
  float x = SceneInfo(float3(p.x+epsilon,p.y,p.z)).w - SceneInfo(float3(p.x-epsilon,p.y,p.z)).w;
  float y = SceneInfo(float3(p.x,p.y+epsilon,p.z)).w - SceneInfo(float3(p.x,p.y-epsilon,p.z)).w;
  float z = SceneInfo(float3(p.x,p.y,p.z+epsilon)).w - SceneInfo(float3(p.x,p.y,p.z-epsilon)).w;
  return normalize(float3(x,y,z));
}

float CalculateShadow(Ray ray, float dstToShadePoint) {
  float rayDst = 0;
  int marchSteps = 0;
  float shadowIntensity = 0.0;
  float brightness = 1.0;

  while (rayDst < dstToShadePoint) {
    marchSteps ++;
    float4 sceneInfo = SceneInfo(ray.origin);
    float dst = sceneInfo.w;

    if (dst <= epsilon) {
      return shadowIntensity;
    }

    brightness = min(brightness,dst*200);

    ray.origin += ray.direction * dst;
    rayDst += dst;
  }
  return shadowIntensity + (1-shadowIntensity) * brightness;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
  // uint width,height;
  // Destination.GetDimensions(width, height);

  // Destination[id.xy] = Source[id.xy];
  float4 destinationTexture = float4(0,0,0,0);

  // do for each light
  for(int i = 0; i < numLights; i++)
  {
    // pick light
    Light light = lights[i];
    float3 lightPosition = light.position;
    bool pointLight = light.pointLight == 1 ? true : false;

    float2 uv = id.xy / float2(Width,Height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (rayDst < maxDst) {
      marchSteps ++;
      float4 sceneInfo = SceneInfo(ray.origin);
      float dst = sceneInfo.w;

      if (dst <= epsilon) {
        float3 pointOnSurface = ray.origin + ray.direction * dst;
        float3 normal = EstimateNormal(pointOnSurface - ray.direction * epsilon);
        float3 lightDir = (pointLight)?normalize(lightPosition-ray.origin):-lightPosition;
        float lighting = saturate(saturate(dot(normal,lightDir)));
        float3 col = sceneInfo.xyz;

        // Shadow
        float3 offsetPos = pointOnSurface + normal * shadowBias;
        float3 dirToLight = (pointLight)?normalize(lightPosition- offsetPos):-lightPosition;

        ray.origin = offsetPos;
        ray.direction = dirToLight;

        float dstToLight = (pointLight)?distance(offsetPos,lightPosition):maxDst;
        float shadow = CalculateShadow(ray, dstToLight);

        // col = 0;
        // lighting = 0;
        // shadow = 0;


        // Destination[id.xy] = destinationTexture;
        // Ray cameraRay = CreateCameraRay(uv);
        float3 cameraPosition = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
        float dist = distance(cameraPosition, pointOnSurface);
        if (dist > maxDst*Linear01Depth(Depth[id.xy]) + depthScaler)
        {
          // destinationTexture = Source[id.xy]; // not doing anything to it
          // destinationTexture = float4(0,0,0,0);
        }
        else
        {
          destinationTexture += float4(col * lighting * shadow, 1);
          //
          // if (i == 0)
          // {
          //   destinationTexture = float4(col * lighting * shadow, 1);
          // }
          // else
          // {
          // }
        }

        break;
        // }
      }

      ray.origin += ray.direction * dst;
      rayDst += dst;
    }

  }

  // float4 sourceTexture = Source[id.xy];
  // Destination[id.xy] = Depth[id.xy];
  // destinationTexture = float4(1,1,1,1);
  // float4 depthVect = Depth[id.xy]*10;
  // depthVect = depthVect*Depth[id.xy].r;
  // uint widthUV,heightUV;
  // Destination.GetDimensions(widthUV, heightUV);
  // float2 uvNew = id.xy / float2(widthUV,heightUV) * 2 - 1;
  float2 position = float2((id.x / Width), (id.y / Height));

  Destination[id.xy] = destinationTexture;
  // Destination[id.xy] = Depth[id.xy]*10;


}
